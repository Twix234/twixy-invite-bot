const fs = require('fs');
const readline = require('readline');
const { VK } = require('vk-io');
const dotenv = require('dotenv');
const { spawn } = require('child_process');
const { setInterval } = require('timers');

const CONFIG_FILE = '.env';
const COMMANDS_FILE = 'commands.json';
const EXCLUDE_FILE = 'exclude.json';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let commands = {};
let inviteActive = false;
let inviteStopped = false;
let currentProcess = null;
let chatMembersCache = new Map();
let botActive = true;
let excludeList = new Set();
let lastActivity = Date.now();

// –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
const ACTIVITY_TIMEOUT = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç
const MONITOR_INTERVAL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
function loadData() {
    try {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥
        if (fs.existsSync(COMMANDS_FILE)) {
            commands = JSON.parse(fs.readFileSync(COMMANDS_FILE, 'utf-8'));
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        if (fs.existsSync(EXCLUDE_FILE)) {
            const data = JSON.parse(fs.readFileSync(EXCLUDE_FILE, 'utf-8'));
            if (Array.isArray(data)) {
                excludeList = new Set(data);
            }
        }
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', e);
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveData() {
    try {
        fs.writeFileSync(COMMANDS_FILE, JSON.stringify(commands, null, 2));
        fs.writeFileSync(EXCLUDE_FILE, JSON.stringify([...excludeList], null, 2));
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', e);
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async function setupConfig() {
    if (!fs.existsSync(CONFIG_FILE)) {
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });

        let token, userId;
        
        try {
            const input = await new Promise(resolve => {
                rl.question('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏–ª–∏ —Å—Å—ã–ª–∫—É: ', resolve);
            });

            if (input.includes('access_token')) {
                const params = new URLSearchParams(input.split('#')[1]);
                token = params.get('access_token');
                userId = params.get('user_id');
            } else {
                token = input.trim();
            }

            if (!userId) {
                userId = await new Promise(resolve => {
                    rl.question('–í–≤–µ–¥–∏—Ç–µ USER_ID: ', resolve);
                });
            }
            
            fs.writeFileSync(CONFIG_FILE, 
                `VK_TOKEN="${token}"\nUSER_ID="${userId}"\nDELAY=0.5`
            );
            console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!');
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', e);
            process.exit(1);
        } finally {
            rl.close();
        }
    }
    
    dotenv.config();
    if (!process.env.DELAY) process.env.DELAY = 0.5;
    loadData();
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function getChatMembers(vk, peerId) {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        if (chatMembersCache.has(peerId)) {
            const { timestamp, members } = chatMembersCache.get(peerId);
            if (Date.now() - timestamp < 30000) { // 30 —Å–µ–∫—É–Ω–¥ –∫—ç—à
                return members;
            }
        }

        const response = await vk.api.messages.getConversationMembers({
            peer_id: peerId
        });
        
        const members = new Set(response.items.map(m => m.member_id));
        chatMembersCache.set(peerId, {
            timestamp: Date.now(),
            members
        });
        
        return members;
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞:', e);
        return new Set();
    }
}

// –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
function restartBot() {
    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
    const child = spawn(process.argv[0], [process.argv[1]], {
        detached: true,
        stdio: 'inherit'
    });
    child.unref();
    process.exit(0);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    process.on('uncaughtException', (err) => {
        console.error('‚ùó –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', err);
        setTimeout(restartBot, 5000);
    });

    process.on('unhandledRejection', (reason, promise) => {
        console.error('‚ùó –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ–º–∏—Å:', promise, '–ø—Ä–∏—á–∏–Ω–∞:', reason);
    });

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    setInterval(() => {
        if (Date.now() - lastActivity > ACTIVITY_TIMEOUT) {
            console.log('‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
            restartBot();
        }
    }, MONITOR_INTERVAL);

    await setupConfig();

    const vk = new VK({
        token: process.env.VK_TOKEN,
        apiMode: 'sequential', // –ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        apiLimit: 3, // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        apiWait: 1000, // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        language: 'ru'
    });

    // –ñ–µ—Å—Ç–∫–∏–µ –º—É–ª—å—Ç–∏–∫–æ–º–∞–Ω–¥—ã (—Å–∏–Ω–æ–Ω–∏–º—ã)
    const multicommands = {
        // –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        '–∏–Ω–≤–∞–π—Ç': 'invitefriends',
        '–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å': 'invitefriends',
        '–¥–æ–±–∞–≤–∏—Ç—å': 'invitefriends',
        'inv': 'invitefriends',
        '–¥–æ–±–∞–≤—å': 'invitefriends',
        '–ø—Ä–∏–≥–ª': 'invitefriends',
        '–ø—Ä–∏–≥–ª–∞—Å–∏': 'invitefriends',
        
        // –ü–æ–¥–ø–∏—Å—á–∏–∫–∏
        '–∏–Ω–≤–∞–π—Ç–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤': 'invitesubs',
        '–ø–æ–¥–ø–∏—Å–∫–∏': 'invitesubs',
        '–ø–æ–¥–ø–∏—Å—á–∏–∫–∏': 'invitesubs',
        'subs': 'invitesubs',
        '—Ñ–æ–ª–ª–æ–≤–µ—Ä—ã': 'invitesubs',
        '–ø–æ–¥–ø–∏—Å': 'invitesubs',
        
        // –í—Å–µ
        '–∏–Ω–≤–∞–π—Ç–≤—Å–µ—Ö': 'inviteboth',
        '–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å–≤—Å–µ—Ö': 'inviteboth',
        '–¥–æ–±–∞–≤–∏—Ç—å–≤—Å–µ—Ö': 'inviteboth',
        '–≤—Å–µ—Ö': 'inviteboth',
        '–≤—Å–µ': 'inviteboth',
        'all': 'inviteboth',
        
        // –ë–ª–∏–∑–∫–∏–µ –¥—Ä—É–∑—å—è
        '–∏–Ω–≤–∞–π—Ç–±–ª–∏–∑–∫–∏—Ö': 'inviteclose',
        '–±–ª–∏–∑–∫–∏–µ': 'inviteclose',
        'closefriends': 'inviteclose',
        '–ª—É—á—à–∏–µ': 'inviteclose',
        '–±–ª–∏–∑–∫–∏–µ–¥—Ä—É–∑—å—è': 'inviteclose',
        
        // –ö–∞—Å—Ç–æ–º–Ω–æ–µ
        '–∫–∞—Å—Ç–æ–º': 'custominvite',
        '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': 'custominvite',
        '—á–∏—Å–ª–æ': 'custominvite',
        '–≤—ã–±–æ—Ä–æ—á–Ω–æ': 'custominvite',
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        '–∑–∞–¥–µ—Ä–∂–∫–∞': 'delay',
        '–ø–∞—É–∑–∞': 'delay',
        '–∏–Ω—Ç–µ—Ä–≤–∞–ª': 'delay',
        
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞
        '—Å—Ç–æ–ø': 'stop',
        '–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å': 'stop',
        '–æ—Ç–º–µ–Ω–∞': 'stop',
        '–ø—Ä–µ—Ä–≤–∞—Ç—å': 'stop',
        
        // –í–∫–ª/–≤—ã–∫–ª
        '–≤—ã–∫–ª—é—á–∏—Ç—å': 'off',
        '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å': 'off',
        '–≤–∫–ª—é—á–∏—Ç—å': 'on',
        '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å': 'on',
        
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
        '–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫': 'restart',
        '—Ä–µ—Å—Ç–∞—Ä—Ç': 'restart',
        '–æ–±–Ω–æ–≤–∏—Ç—å': 'restart',
        
        // –ò–Ω—Ñ–æ
        '–∏–Ω—Ñ–æ': 'info',
        '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è': 'info',
        '—Å—Ç–∞—Ç—É—Å': 'info',
        
        // –ö–æ–º–∞–Ω–¥—ã
        '–∫–æ–º–∞–Ω–¥–∞': 'cmd',
        '—Å–æ–∑–¥–∞—Ç—å': 'cmd',
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞
        '–ø–∏–Ω–≥': 'ping',
        '—Ä–∞–±–æ—Ç–∞–µ—à—å': 'ping',
        '—Å—Ç–∞—Ç—É—Å–±–æ—Ç–∞': 'ping',
        
        // –ü–æ–º–æ—â—å
        '–ø–æ–º–æ—â—å': 'help',
        '—Å–ø—Ä–∞–≤–∫–∞': 'help',
        '—Ö–µ–ª–ø': 'help',
        
        // –ò—Å–∫–ª—é—á–µ–Ω–∏—è
        '–Ω–µ–¥–æ–±–∞–≤–ª—è—Ç—å': 'exclude',
        '–∏—Å–∫–ª—é—á–∏—Ç—å': 'exclude',
        '–¥–æ–±–∞–≤–ª—è—Ç—å': 'include',
        '—É–±—Ä–∞—Ç—å': 'include',
        
        // –ê–ª–∏–∞—Å—ã
        '–∫–æ–º–∞–Ω–¥—ã': 'aliases',
        '–ø–æ–∫–∞–∑–∞—Ç—å': 'aliases',
        '–ø–æ–∫–∞–∑–∞—Ç—å–∫–æ–º–∞–Ω–¥—ã': 'aliases',
        
        // –ú—É–ª—å—Ç–∏–∫–æ–º–∞–Ω–¥—ã
        '–º—É–ª—å—Ç–∏–∫–æ–º–∞–Ω–¥—ã': 'multicmd',
        '—Å–∏–Ω–æ–Ω–∏–º—ã': 'multicmd',
        '–∫–æ–º–∞–Ω–¥–∞–ª–∏–∏': 'multicmd'
    };

    // –ö–æ–º–∞–Ω–¥–∞ help
    const helpText = `
ü§ñ Twixy-Invite-Bot(1.0.0)

üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:
  /–¥—Ä—É–∑—å—è [–∫–æ–ª-–≤–æ] - –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π
  /–ø–æ–¥–ø–∏—Å—á–∏–∫–∏ [–∫–æ–ª-–≤–æ] - –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
  /–≤—Å–µ—Ö [–∫–æ–ª-–≤–æ] - –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤—Å–µ—Ö
  /–±–ª–∏–∑–∫–∏–µ [–∫–æ–ª-–≤–æ] - –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –±–ª–∏–∑–∫–∏—Ö –¥—Ä—É–∑–µ–π
  /–∫–∞—Å—Ç–æ–º [—Ç–∏–ø] [–∫–æ–ª-–≤–æ] - –í—ã–±–æ—Ä–æ—á–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
  (—Ç–∏–ø—ã: friends, subs, both, close)

‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
  /–∑–∞–¥–µ—Ä–∂–∫–∞ [—Å–µ–∫] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É
  /—Å—Ç–æ–ø - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
  /–≤—ã–∫–ª—é—á–∏—Ç—å - –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
  /–≤–∫–ª—é—á–∏—Ç—å - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
  /–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞
  /–∏–Ω—Ñ–æ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ

üõ†Ô∏è –ö–æ–º–∞–Ω–¥—ã:
  /–∫–æ–º–∞–Ω–¥–∞ [–æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞] [–∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å] - –°–æ–∑–¥–∞—Ç—å –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è –æ—Å–Ω–æ–≤—ã—ã—Ö –∫–æ–º–∞–Ω–¥.
  /—É–¥–∞–ª–∏—Ç—å–∫–æ–º–∞–Ω–¥—É [–∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è] - –£–¥–∞–ª–∏—Ç—å –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é –¥–ª—è –∫–æ–º–∞–Ω–¥.
  /–æ—á–∏—Å—Ç–∏—Ç—å–∫–æ–º–∞–Ω–¥—ã - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥.
  /–∫–æ–º–∞–Ω–¥—ã - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥.
  /–º—É–ª—å—Ç–∏–∫–æ–º–∞–Ω–¥—ã - –ü–æ–∫–∞–∑–∞—Ç—å –º—É–ª—å—Ç–∏–∫–æ–º–∞–Ω–¥—ã

üö´ –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
  /–Ω–µ–¥–æ–±–∞–≤–ª—è—Ç—å [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - –î–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
  /–¥–æ–±–∞–≤–ª—è—Ç—å [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π

üìå –ü—Ä–∏–º–µ—Ä—ã:
  /–¥—Ä—É–∑—å—è 50
  /–∑–∞–¥–µ—Ä–∂–∫–∞ 0.8
  /–∫–æ–º–∞–Ω–¥–∞ help —Å–ø—Ä–∞–≤–∫–∞
  /–Ω–µ–¥–æ–±–∞–≤–ª—è—Ç—å @username
`;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    vk.updates.on('message_new', async (context) => {
        lastActivity = Date.now();
        
        if (context.senderId !== parseInt(process.env.USER_ID)) return;
        
        let text = context.text.trim();
        let command = null;
        let prefixUsed = '';

        // –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã
        for (const prefix of ['!', '/', '.']) {
            if (text.toLowerCase().startsWith(prefix.toLowerCase())) {
                const cmd = text.slice(prefix.length).split(' ')[0];
                const normalizedCmd = cmd.toLowerCase();
                command = multicommands[normalizedCmd] || commands[normalizedCmd] || normalizedCmd;
                prefixUsed = prefix;
                break;
            }
        }

        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        const criticalCommands = new Set(['on', 'help', 'restart']);
        if (!botActive && !criticalCommands.has(command)) return;

        try {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.prefix = prefixUsed;
            
            switch (command) {
                case 'invitefriends': {
                    const count = parseInt(context.text.split(' ')[1]) || 0;
                    if (count <= 0) {
                        context.send('‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0');
                        return;
                    }
                    await handleInviteFriends(context, vk, count);
                    break;
                }
                    
                case 'invitesubs': {
                    const count = parseInt(context.text.split(' ')[1]) || 0;
                    if (count <= 0) {
                        context.send('‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0');
                        return;
                    }
                    await handleInviteSubs(context, vk, count);
                    break;
                }
                    
                case 'inviteboth': {
                    const count = parseInt(context.text.split(' ')[1]) || 0;
                    if (count <= 0) {
                        context.send('‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0');
                        return;
                    }
                    await handleInviteBoth(context, vk, count);
                    break;
                }
                    
                case 'inviteclose': {
                    const count = parseInt(context.text.split(' ')[1]) || 0;
                    if (count <= 0) {
                        context.send('‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0');
                        return;
                    }
                    await handleInviteClose(context, vk, count);
                    break;
                }
                    
                case 'custominvite': {
                    const parts = context.text.split(' ').slice(1);
                    if (parts.length < 2) {
                        context.send('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /custominvite [—Ç–∏–ø] [–∫–æ–ª-–≤–æ]\n–¢–∏–ø—ã: friends, subs, both, close');
                        return;
                    }
                    
                    const [type, countStr] = parts;
                    const count = parseInt(countStr);
                    
                    if (!['friends', 'subs', 'both', 'close'].includes(type)) {
                        context.send('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø! –î–æ–ø—É—Å—Ç–∏–º—ã–µ: friends, subs, both, close');
                        return;
                    }
                    
                    if (isNaN(count) || count <= 0) {
                        context.send('‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0');
                        return;
                    }
                    
                    switch (type) {
                        case 'friends': await handleInviteFriends(context, vk, count); break;
                        case 'subs': await handleInviteSubs(context, vk, count); break;
                        case 'both': await handleInviteBoth(context, vk, count); break;
                        case 'close': await handleInviteClose(context, vk, count); break;
                    }
                    break;
                }
                    
                case 'delay': {
                    const delay = parseFloat(context.text.split(' ')[1]);
                    if (isNaN(delay) || delay <= 0 || delay > 10) {
                        context.send('‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.1 –¥–æ 10');
                        return;
                    }
                    process.env.DELAY = delay;
                    fs.appendFileSync(CONFIG_FILE, `\nDELAY=${delay}`);
                    context.send(`‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${delay} —Å–µ–∫`);
                    break;
                }
                    
                case 'cmd': {
                    const args = context.text.slice(context.prefix.length + command.length + 1).trim().split(/\s+/);
                    if (args.length < 2) {
                        context.send('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /cmd [–æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞] [–∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å]\n–ü—Ä–∏–º–µ—Ä: /cmd help —Å–ø—Ä–∞–≤–∫–∞');
                        return;
                    }
                    
                    const [target, alias] = args;
                    if (!target || !alias) {
                        context.send('‚ùå –£–∫–∞–∂–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é –¥–ª—è –∫–æ–º–∞–Ω–¥.');
                        return;
                    }
                    
                    commands[alias.toLowerCase()] = target;
                    saveData();
                    context.send(`‚úÖ –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∞: "${alias}" ‚Üí "${target}"`);
                    break;
                }
                    
                case 'delalias': 
                case '—É–¥–∞–ª–∏—Ç—å–∫–æ–º–∞–Ω–¥—É': {
                    const alias = context.text.split(' ')[1]?.toLowerCase();
                    if (!alias) {
                        context.send('‚ùå –£–∫–∞–∂–∏—Ç–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é –¥–ª—è –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
                        return;
                    }
                    
                    if (commands[alias]) {
                        delete commands[alias];
                        saveData();
                        context.send(`‚úÖ –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "${alias}" —É–¥–∞–ª–µ–Ω`);
                    } else {
                        context.send(`‚ùå –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "${alias}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                    }
                    break;
                }
                    
                case 'clearaliases': 
                case '–æ—á–∏—Å—Ç–∏—Ç—å–∫–æ–º–∞–Ω–¥—ã': {
                    if (Object.keys(commands).length === 0) {
                        context.send('‚ÑπÔ∏è –ù–µ—Ç –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
                        return;
                    }
                    
                    commands = {};
                    saveData();
                    context.send('‚úÖ –í—Å–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω—ã');
                    break;
                }
                    
                case 'stop': {
                    if (inviteActive) {
                        inviteStopped = true;
                        if (currentProcess) clearTimeout(currentProcess);
                        inviteActive = false;
                        context.send('üõë –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                    } else {
                        context.send('‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
                    }
                    break;
                }
                    
                case 'off': {
                    botActive = false;
                    context.send('üî¥ –ë–æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /on –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏');
                    break;
                }
                    
                case 'on': {
                    botActive = true;
                    context.send('üü¢ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
                    break;
                }
                    
                case 'restart': {
                    context.send('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...');
                    setTimeout(restartBot, 500);
                    break;
                }
                    
                case 'ping': {
                    context.send('‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –°—Ç–∞—Ç—É—Å: ' + (botActive ? '–ê–ö–¢–ò–í–ï–ù' : '–î–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–ù'));
                    break;
                }
                    
                case 'info': {
                    context.send(`
ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ —Ç–µ–∫—É—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö:
Twixy-invite-bot(JS)
–í–µ—Ä—Å–∏—è:1.0.0
–¢–µ–∫—É—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: ${process.env.DELAY} —Å–µ–∫
–°—Ç–∞—Ç—É—Å –ë–æ—Ç–∞: ${botActive ? '–ê–ö–¢–ò–í–ï–ù' : '–î–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–ù'}
–í–∞—à–∏ –ª–∏—á–Ω—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥: ${Object.keys(commands).length}
–ò—Å–∫–ª—é—á–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å: ${excludeList.size}
–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: ${inviteActive ? '–ê–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ' : '–ù–µ—Ç'}
                    `);
                    break;
                }
                    
                case 'help': {
                    context.send(helpText);
                    break;
                }
                    
                case 'exclude': {
                    const userInput = context.text.slice(context.prefix.length + command.length + 1).trim();
                    if (!userInput) {
                        context.send('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                        return;
                    }
                    
                    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è resolveUser –±—É–¥–µ—Ç –Ω–∏–∂–µ
                    const userId = await resolveUser(vk, context, userInput);
                    if (!userId) {
                        context.send('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                        return;
                    }
                    
                    excludeList.add(userId);
                    saveData();
                    context.send(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è`);
                    break;
                }
                    
                case 'include': {
                    const userInput = context.text.slice(context.prefix.length + command.length + 1).trim();
                    if (!userInput) {
                        context.send('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                        return;
                    }
                    
                    const userId = await resolveUser(vk, context, userInput);
                    if (!userId) {
                        context.send('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                        return;
                    }
                    
                    if (excludeList.delete(userId)) {
                        saveData();
                        context.send(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π`);
                    } else {
                        context.send(`‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö`);
                    }
                    break;
                }
                    
                case 'aliases': {
                    if (Object.keys(commands).length === 0) {
                        context.send('‚ÑπÔ∏è –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã');
                        return;
                    }
                    
                    let aliasesText = 'üìù –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥.:\n';
                    for (const [alias, target] of Object.entries(commands)) {
                        aliasesText += `- ${alias} ‚Üí ${target}\n`;
                    }
                    context.send(aliasesText);
                    break;
                }
                    
                case 'multicmd': {
                    let multicmdText = 'üî† –ú—É–ª—å—Ç–∏–∫–æ–º–∞–Ω–¥—ã:\n';
                    const sorted = Object.entries(multicommands).sort();
                    
                    for (const [synonym, command] of sorted) {
                        multicmdText += `- ${synonym} ‚Üí ${command}\n`;
                    }
                    context.send(multicmdText);
                    break;
                }
                    
                
                default: {
                    if (commands[command]) {
                        const newText = context.prefix + commands[command] + 
                                      context.text.slice(context.prefix.length + command.length);
                        vk.updates.emit('message_new', {
                            ...context,
                            text: newText
                        });
                    }
                }
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã:', e);
            if (botActive) {
                context.send(`‚ùå –û—à–∏–±–∫–∞: ${e.message}`);
            }
        }
    });

    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try {
        await vk.updates.start();
        console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...');
        console.log('üë§ USER_ID:', process.env.USER_ID);
        console.log('‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞:', process.env.DELAY + ' —Å–µ–∫');
        console.log('üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∫–ª—é—á–µ–Ω');
    } catch (e) {
        console.error('üö® –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', e);
        setTimeout(restartBot, 5000);
    }
}

// –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function resolveUser(vk, context, input) {
    // –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (context.replyMessage) {
        return context.replyMessage.senderId;
    }
    
    // –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (context.forwards.length > 0) {
        return context.forwards[0].senderId;
    }
    
    // –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    if (input.startsWith('[')) {
        const match = input.match(/\[(id|public|club)(\d+)\|/);
        if (match) return parseInt(match[2]);
    }
    
    // ID
    if (/^\d+$/.test(input)) {
        return parseInt(input);
    }
    
    // @username
    if (input.startsWith('@')) {
        try {
            const resolved = await vk.api.utils.resolveScreenName({
                screen_name: input.slice(1)
            });
            if (resolved && resolved.object_id && resolved.type === 'user') {
                return resolved.object_id;
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:', e);
        }
    }
    
    return null;
}

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
async function inviteUsers(context, vk, users, typeText) {
    if (inviteActive) {
        context.send('‚ö†Ô∏è –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop –¥–ª—è –æ—Ç–º–µ–Ω—ã');
        return;
    }
    
    inviteActive = true;
    inviteStopped = false;
    let criticalError = false;

    try {
        const chatId = context.peerId;
        const chatMembers = await getChatMembers(vk, chatId);
        
        await context.send(
            `ü§ñ –ù–∞—á–∏–Ω–∞—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: ${typeText}\n` +
            `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n` +
            `‚è± –ó–∞–¥–µ—Ä–∂–∫–∞: ${process.env.DELAY} —Å–µ–∫\n` +
            `üïí –ü–æ–¥–æ–∂–¥–∏—Ç–µ...`
        );

        let success = 0;
        let skipped = 0;
        
        for (const userId of users) {
            if (inviteStopped) {
                console.log('‚èπ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                break;
            }
            
            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:
            if (chatMembers.has(userId)) {
                skipped++;
                continue;
            }
            
            if (excludeList.has(userId)) {
                skipped++;
                continue;
            }

            try {
                await vk.api.messages.addChatUser({
                    chat_id: chatId - 2000000000,
                    user_id: userId
                });

                success++;
                chatMembers.add(userId);
                
                await new Promise(resolve => {
                    currentProcess = setTimeout(resolve, process.env.DELAY * 1000);
                });
            } catch (e) {
                skipped++;
                
                if ([925, 15, 935].includes(e.code)) {
                    criticalError = true;
                    break;
                }
                
                if (e.code === 6) {
                    await new Promise(resolve => setTimeout(resolve, 1000));
                }
            }
        }

        if (criticalError) {
            context.send('üõë –ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
        } else {
            context.send(
                `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:\n` +
                `‚úÖ –£—Å–ø–µ—à–Ω–æ: ${success}\n` +
                `‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}\n` +
                `üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${inviteStopped ? '–î–∞' : '–ù–µ—Ç'}`
            );
        }
    } catch (e) {
        console.error('üö® –û—à–∏–±–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', e);
        context.send(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${e.message}`);
    } finally {
        inviteActive = false;
        inviteStopped = false;
        currentProcess = null;
    }
}
// –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π
async function handleInviteFriends(context, vk, count = 0) {
    try {
        const friends = await vk.api.friends.get({});
        let users = friends.items.filter(id => !excludeList.has(id));
        
        if (users.length === 0) {
            context.send('‚ÑπÔ∏è –ù–µ—Ç –¥—Ä—É–∑–µ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
            return;
        }
        
        if (count > 0 && count < users.length) {
            users = users.slice(0, count);
        }
        
        await inviteUsers(context, vk, users, '–¥—Ä—É–∑—å—è');
    } catch (e) {
        context.send(`‚ùå –û—à–∏–±–∫–∞: ${e.message}`);
    }
}

// –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
async function handleInviteSubs(context, vk, count = 0) {
    try {
        const followers = await vk.api.users.getFollowers({ count: 1000 });
        let users = followers.items.filter(id => !excludeList.has(id));
        
        if (users.length === 0) {
            context.send('‚ÑπÔ∏è –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
            return;
        }
        
        if (count > 0 && count < users.length) {
            users = users.slice(0, count);
        }
        
        await inviteUsers(context, vk, users, '–ø–æ–¥–ø–∏—Å—á–∏–∫–∏');
    } catch (e) {
        context.send(`‚ùå –û—à–∏–±–∫–∞: ${e.message}`);
    }
}

// –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤—Å–µ—Ö
async function handleInviteBoth(context, vk, count = 0) {
    try {
        const [friends, followers] = await Promise.all([
            vk.api.friends.get({}),
            vk.api.users.getFollowers({ count: 1000 })
        ]);
        
        let users = [...new Set([...friends.items, ...followers.items])]
            .filter(id => !excludeList.has(id));
        
        if (users.length === 0) {
            context.send('‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
            return;
        }
        
        if (count > 0 && count < users.length) {
            users = users.slice(0, count);
        }
        
        await inviteUsers(context, vk, users, '–¥—Ä—É–∑—å—è+–ø–æ–¥–ø–∏—Å—á–∏–∫–∏');
    } catch (e) {
        context.send(`‚ùå –û—à–∏–±–∫–∞: ${e.message}`);
    }
}

// –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –±–ª–∏–∑–∫–∏—Ö –¥—Ä—É–∑–µ–π (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø)
async function handleInviteClose(context, vk, count = 0) {
    try {
        const friends = await vk.api.friends.get({ 
            fields: 'lists',
            count: 1000
        });
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–ª–∏–∑–∫–∏—Ö –¥—Ä—É–∑–µ–π
        const closeFriends = friends.items.filter(friend => 
            friend.lists && friend.lists.includes(1)
        );
        
        let users = closeFriends
            .map(f => f.id)
            .filter(id => !excludeList.has(id));
        
        if (users.length === 0) {
            context.send('‚ÑπÔ∏è –ù–µ—Ç –±–ª–∏–∑–∫–∏—Ö –¥—Ä—É–∑–µ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
            return;
        }
        
        if (count > 0 && count < users.length) {
            users = users.slice(0, count);
        }
        
        await inviteUsers(context, vk, users, '–±–ª–∏–∑–∫–∏–µ –¥—Ä—É–∑—å—è');
    } catch (e) {
        context.send(`‚ùå –û—à–∏–±–∫–∞: ${e.message}`);
    }
}

// –ó–∞–ø—É—Å–∫
main().catch(err => {
    console.error('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', err);
    setTimeout(restartBot, 5000);
});